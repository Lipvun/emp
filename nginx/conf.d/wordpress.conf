location / {
	if (-f $request_filename) {
		break;
	}
	 
	set $supercache_file '';
	set $supercache_uri $request_uri;
	 
	if ($request_method = POST) {
		set $supercache_uri '';
	}
	 
	# Using pretty permalinks, so bypass the cache for any query string
	if ($query_string) {
		set $supercache_uri '';
	}
	 
	if ($http_cookie ~* "comment_author_|wordpress|wp-postpass_" ) {
	set $supercache_uri '';
	}
 
	# if we haven't bypassed the cache, specify our supercache file
	if ($supercache_uri ~ ^(.+)$) {
		set $supercache_file /wp-content/cache/supercache/$http_host/$1index.html;
	}
	 
	# only rewrite to the supercache file if it actually exists
	if (-f $document_root$supercache_file) {
		rewrite ^(.*)$ $supercache_file break;
	}
	 
	# all other requests go to WordPress
	if (!-e $request_filename) {
		rewrite . /index.php last;
	}
}
        
# Pass PHP scripts to php-fastcgi listening on port 9000
location ~ .php$ {

	try_files $uri =404;

	include fastcgi_params;

	# Keep these parameters for compatibility with old PHP scripts using them.
	fastcgi_param PATH_INFO $fastcgi_path_info;
	fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

	# Some default config
	fastcgi_connect_timeout        20;
	fastcgi_send_timeout          180;
	fastcgi_read_timeout          180;
	fastcgi_buffer_size          128k;
	fastcgi_buffers            4 256k;
	fastcgi_busy_buffers_size    256k;
	fastcgi_temp_file_write_size 256k;
	fastcgi_intercept_errors    on;
	fastcgi_ignore_client_abort off;
	fastcgi_pass php;

}
# PHP search for file Exploit:
# The PHP regex location block fires instead of the try_files block. Therefore we need
# to add "try_files $uri =404;" to make sure that "/uploads/virusimage.jpg/hello.php"
# never executes the hidden php code inside virusimage.jpg because it can't find hello.php!
# The exploit also can be stopped by adding "cgi.fix_pathinfo = 0" in your php.ini file.